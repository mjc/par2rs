name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache Rust toolchain
      uses: actions/cache@v4
      with:
        path: |
          ~/.rustup/toolchains
          ~/.rustup/update-hashes
          ~/.rustup/settings.toml
        key: ${{ runner.os }}-rustup-${{ hashFiles('rust-toolchain.toml') }}
        restore-keys: |
          ${{ runner.os }}-rustup-

    - name: Cache par2cmdline
      id: cache-par2
      uses: actions/cache@v4
      with:
        path: /usr/bin/par2
        key: ${{ runner.os }}-par2cmdline

    - name: Install par2cmdline
      if: steps.cache-par2.outputs.cache-hit != 'true'
      run: sudo apt-get update && sudo apt-get install -y par2

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Cache cargo target
      uses: actions/cache@v4
      with:
        path: target/
        key: ${{ runner.os }}-cargo-target-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('**/*.rs') }}
        restore-keys: |
          ${{ runner.os }}-cargo-target-${{ hashFiles('**/Cargo.lock') }}-
          ${{ runner.os }}-cargo-target-

    - name: Build
      run: cargo build --verbose
    - name: Run tests
      run: cargo test --verbose

  coverage:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache Rust toolchain
      uses: actions/cache@v4
      with:
        path: |
          ~/.rustup/toolchains
          ~/.rustup/update-hashes
          ~/.rustup/settings.toml
        key: ${{ runner.os }}-rustup-${{ hashFiles('rust-toolchain.toml') }}
        restore-keys: |
          ${{ runner.os }}-rustup-

    - name: Cache par2cmdline
      id: cache-par2-coverage
      uses: actions/cache@v4
      with:
        path: /usr/bin/par2
        key: ${{ runner.os }}-par2cmdline

    - name: Install par2cmdline
      if: steps.cache-par2-coverage.outputs.cache-hit != 'true'
      run: sudo apt-get update && sudo apt-get install -y par2

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Cache cargo target
      uses: actions/cache@v4
      with:
        path: target/
        key: ${{ runner.os }}-cargo-target-coverage-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('**/*.rs') }}
        restore-keys: |
          ${{ runner.os }}-cargo-target-coverage-${{ hashFiles('**/Cargo.lock') }}-
          ${{ runner.os }}-cargo-target-coverage-
          ${{ runner.os }}-cargo-target-

    - name: Cache cargo-tarpaulin
      uses: actions/cache@v4
      with:
        path: ~/.cargo/bin/cargo-tarpaulin
        key: ${{ runner.os }}-cargo-tarpaulin-${{ hashFiles('~/.cargo/bin/cargo-tarpaulin') }}
        restore-keys: |
          ${{ runner.os }}-cargo-tarpaulin-

    - name: Install cargo-tarpaulin
      run: |
        if ! command -v cargo-tarpaulin &> /dev/null; then
          cargo install cargo-tarpaulin
        fi

    - name: Generate coverage report
      run: |
        cargo tarpaulin --verbose --all-features --workspace --timeout 120 \
          --out Xml --out Html --out Lcov \
          --output-dir target/coverage

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: target/coverage/cobertura.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        verbose: true
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    - name: Upload test results to Codecov
      if: ${{ !cancelled() }}
      uses: codecov/test-results-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Archive coverage results
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: target/coverage/
